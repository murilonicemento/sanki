// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sanki.Persistence;

#nullable disable

namespace Sanki.Persistence.Migrations
{
    [DbContext(typeof(SankiContext))]
    [Migration("20250213021520_ChangeFlashcardReviewRelation")]
    partial class ChangeFlashcardReviewRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sanki.Entities.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("question");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("response");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uuid")
                        .HasColumnName("resume_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("flashcards_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ResumeId" }, "idx_flashcards_resume_id");

                    b.ToTable("flashcards", (string)null);
                });

            modelBuilder.Entity("Sanki.Entities.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("resumes_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_resumes_user_id");

                    b.ToTable("resumes", (string)null);
                });

            modelBuilder.Entity("Sanki.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("FlashcardId")
                        .HasColumnType("uuid")
                        .HasColumnName("flashcard_id");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("review_date");

                    b.HasKey("Id")
                        .HasName("reviews_pkey");

                    b.HasIndex("FlashcardId")
                        .IsUnique();

                    b.HasIndex(new[] { "FlashcardId" }, "idx_reviews_flashcard_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Sanki.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasMaxLength(255)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Sanki.Entities.Flashcard", b =>
                {
                    b.HasOne("Sanki.Entities.Resume", "Resume")
                        .WithMany("Flashcards")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("flashcards_fk4");

                    b.HasOne("Sanki.Entities.User", "User")
                        .WithMany("Flashcards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sanki.Entities.Resume", b =>
                {
                    b.HasOne("Sanki.Entities.User", "User")
                        .WithMany("Resumes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("resumes_fk3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sanki.Entities.Review", b =>
                {
                    b.HasOne("Sanki.Entities.Flashcard", "Flashcard")
                        .WithOne("Review")
                        .HasForeignKey("Sanki.Entities.Review", "FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_fk2");

                    b.Navigation("Flashcard");
                });

            modelBuilder.Entity("Sanki.Entities.Flashcard", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("Sanki.Entities.Resume", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Sanki.Entities.User", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("Resumes");
                });
#pragma warning restore 612, 618
        }
    }
}
